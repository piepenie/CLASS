프로그래밍이 무엇인지
자바를 쓰는 이유가 무엇인지.
등장 배경. 등장 이유, 사용했을 장단점

프로그램밍이란 
하드웨어의 0과 1 만 이해할 수 있다.
cpu >> 논리회로의 집합체

>> 1+1 을 컴퓨터에게 입력해주는 프로그래밍언어 

절차지향형의 반복적인 번거로움을 벗어나고자함
객체지향 프로그래밍의 가장 큰 이유는
코드의 재사용성

객체란 무엇인가?
우리가 일상에서 접하는 모든것
사물, 개념, 책상, 동물 
정의서 
사물을 정의하는 과정.
유저라는 존재가 설계도.

추상화
user 란 어떤 존재에여 하는가?
user1, user2, user3 를 
user 라는 단어하나로 부를 수있게하는 과정을
추상화라고한다
안에있는걸 숨기고 밖에있는걸 들어낸다. 

자바에서도 객체의 세부 정보 중에서 필요한 부분만 제공하고 나머지 속성은 감추는 방식으로 추상화를 할 수 있습니다.

해당하는 기능에 메서드가 그 기능을 하는것이라고 생각하는것을 추상화라고 한다

객체란 설계도면
class 를 회원

인스턴스란 
객체라는 설계도로 실제 만들어진 데이터.

User user1 = new User("Alice", 25);

이 문장에서 각 요소는 아래와 같이 해석할 수 있습니다.

User: 이 부분은 클래스 이름으로, 사람이라는 객체를 표현하기 위한 설계도입니다. 즉, User 클래스 자체는 객체의 "설계도"라고 볼 수 있습니다.

user1: 이 부분은 변수입니다. user1은 User 클래스에서 만들어진 인스턴스를 가리키기 위한 참조 변수입니다. 이 변수는 메모리 상의 실제 인스턴스를 가리키는 역할을 합니다.

new User("Alice", 25): 이 부분이 실제로 인스턴스를 생성하는 부분입니다. new 키워드를 사용해 User 클래스에 따라 만들어진 구체적인 데이터가 메모리에 생성됩니다. 즉, "Alice", 25라는 데이터를 가진 User 클래스의 인스턴스가 만들어지는 거죠.

정리하자면
User: 클래스 (설계도)
user1: 변수 (생성된 인스턴스를 가리키는 참조)
new User("Alice", 25): 인스턴스 (클래스 설계도를 따라 실제로 생성된 구체적인 데이터)
따라서, 이 코드는 User 클래스라는 설계도에 따라 인스턴스를 생성하고, 그 인스턴스를 user1이라는 변수로 가리키게 하는 역할을 합니다.

이유? 왜 하필 자바인가?
왜 스프링인가? 
